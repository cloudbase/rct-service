/* automatically generated by rust-bindgen */

#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

pub const ERROR_SUCCESS: DWORD = 0;
pub const ERROR_INSUFFICIENT_BUFFER: DWORD = 122;

pub type wchar_t = ::std::os::raw::c_ushort;
pub type ULONG = ::std::os::raw::c_ulong;
pub type PULONG = *mut ULONG;
pub type DWORD = ::std::os::raw::c_ulong;
pub type BOOL = ::std::os::raw::c_int;
pub type ULONG_PTR = ::std::os::raw::c_ulonglong;
pub type ULONG64 = ::std::os::raw::c_ulonglong;
pub type PULONG64 = *mut ::std::os::raw::c_ulonglong;
pub type PVOID = *mut ::std::os::raw::c_void;
pub type WCHAR = wchar_t;
pub type PWSTR = *mut WCHAR;
pub type PCWSTR = *const WCHAR;
pub type HANDLE = *mut ::std::os::raw::c_void;
pub type PHANDLE = *mut HANDLE;
pub type ULONGLONG = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GUID {
    pub Data1: ::std::os::raw::c_ulong,
    pub Data2: ::std::os::raw::c_ushort,
    pub Data3: ::std::os::raw::c_ushort,
    pub Data4: [::std::os::raw::c_uchar; 8usize],
}
#[test]
fn bindgen_test_layout__GUID() {
    assert_eq!(
        ::std::mem::size_of::<_GUID>(),
        16usize,
        concat!("Size of: ", stringify!(_GUID))
    );
    assert_eq!(
        ::std::mem::align_of::<_GUID>(),
        4usize,
        concat!("Alignment of ", stringify!(_GUID))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GUID>())).Data1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_GUID),
            "::",
            stringify!(Data1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GUID>())).Data2 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_GUID),
            "::",
            stringify!(Data2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GUID>())).Data3 as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_GUID),
            "::",
            stringify!(Data3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GUID>())).Data4 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_GUID),
            "::",
            stringify!(Data4)
        )
    );
}
pub type GUID = _GUID;
pub type PSECURITY_DESCRIPTOR = PVOID;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _OVERLAPPED {
    pub Internal: ULONG_PTR,
    pub InternalHigh: ULONG_PTR,
    pub __bindgen_anon_1: _OVERLAPPED__bindgen_ty_1,
    pub hEvent: HANDLE,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _OVERLAPPED__bindgen_ty_1 {
    pub __bindgen_anon_1: _OVERLAPPED__bindgen_ty_1__bindgen_ty_1,
    pub Pointer: PVOID,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OVERLAPPED__bindgen_ty_1__bindgen_ty_1 {
    pub Offset: DWORD,
    pub OffsetHigh: DWORD,
}
#[test]
fn bindgen_test_layout__OVERLAPPED__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_OVERLAPPED__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(_OVERLAPPED__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_OVERLAPPED__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_OVERLAPPED__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_OVERLAPPED__bindgen_ty_1__bindgen_ty_1>())).Offset as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OVERLAPPED__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(Offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_OVERLAPPED__bindgen_ty_1__bindgen_ty_1>())).OffsetHigh
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_OVERLAPPED__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(OffsetHigh)
        )
    );
}
#[test]
fn bindgen_test_layout__OVERLAPPED__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_OVERLAPPED__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_OVERLAPPED__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_OVERLAPPED__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_OVERLAPPED__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_OVERLAPPED__bindgen_ty_1>())).Pointer as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OVERLAPPED__bindgen_ty_1),
            "::",
            stringify!(Pointer)
        )
    );
}
#[test]
fn bindgen_test_layout__OVERLAPPED() {
    assert_eq!(
        ::std::mem::size_of::<_OVERLAPPED>(),
        32usize,
        concat!("Size of: ", stringify!(_OVERLAPPED))
    );
    assert_eq!(
        ::std::mem::align_of::<_OVERLAPPED>(),
        8usize,
        concat!("Alignment of ", stringify!(_OVERLAPPED))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_OVERLAPPED>())).Internal as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OVERLAPPED),
            "::",
            stringify!(Internal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_OVERLAPPED>())).InternalHigh as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_OVERLAPPED),
            "::",
            stringify!(InternalHigh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_OVERLAPPED>())).hEvent as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_OVERLAPPED),
            "::",
            stringify!(hEvent)
        )
    );
}
pub type LPOVERLAPPED = *mut _OVERLAPPED;
#[link(name = "Kernel32")]
extern "stdcall" {
    pub fn CloseHandle(hObject: HANDLE) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VIRTUAL_STORAGE_TYPE {
    pub DeviceId: DWORD,
    pub VendorId: GUID,
}
#[test]
fn bindgen_test_layout__VIRTUAL_STORAGE_TYPE() {
    assert_eq!(
        ::std::mem::size_of::<_VIRTUAL_STORAGE_TYPE>(),
        20usize,
        concat!("Size of: ", stringify!(_VIRTUAL_STORAGE_TYPE))
    );
    assert_eq!(
        ::std::mem::align_of::<_VIRTUAL_STORAGE_TYPE>(),
        4usize,
        concat!("Alignment of ", stringify!(_VIRTUAL_STORAGE_TYPE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_VIRTUAL_STORAGE_TYPE>())).DeviceId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_VIRTUAL_STORAGE_TYPE),
            "::",
            stringify!(DeviceId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_VIRTUAL_STORAGE_TYPE>())).VendorId as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_VIRTUAL_STORAGE_TYPE),
            "::",
            stringify!(VendorId)
        )
    );
}
pub type VIRTUAL_STORAGE_TYPE = _VIRTUAL_STORAGE_TYPE;
pub type PVIRTUAL_STORAGE_TYPE = *mut _VIRTUAL_STORAGE_TYPE;
pub const _OPEN_VIRTUAL_DISK_VERSION_OPEN_VIRTUAL_DISK_VERSION_UNSPECIFIED:
    _OPEN_VIRTUAL_DISK_VERSION = 0;
pub const _OPEN_VIRTUAL_DISK_VERSION_OPEN_VIRTUAL_DISK_VERSION_1: _OPEN_VIRTUAL_DISK_VERSION = 1;
pub const _OPEN_VIRTUAL_DISK_VERSION_OPEN_VIRTUAL_DISK_VERSION_2: _OPEN_VIRTUAL_DISK_VERSION = 2;
pub const _OPEN_VIRTUAL_DISK_VERSION_OPEN_VIRTUAL_DISK_VERSION_3: _OPEN_VIRTUAL_DISK_VERSION = 3;
pub type _OPEN_VIRTUAL_DISK_VERSION = i32;
pub use self::_OPEN_VIRTUAL_DISK_VERSION as OPEN_VIRTUAL_DISK_VERSION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _OPEN_VIRTUAL_DISK_PARAMETERS {
    pub Version: OPEN_VIRTUAL_DISK_VERSION,
    pub __bindgen_anon_1: _OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1 {
    pub Version1: _OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1__bindgen_ty_1,
    pub Version2: _OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1__bindgen_ty_2,
    pub Version3: _OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1__bindgen_ty_3,
    _bindgen_union_align: [u32; 10usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1__bindgen_ty_1 {
    pub RWDepth: ULONG,
}
#[test]
fn bindgen_test_layout__OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(_OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1__bindgen_ty_1>()))
                .RWDepth as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(RWDepth)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1__bindgen_ty_2 {
    pub GetInfoOnly: BOOL,
    pub ReadOnly: BOOL,
    pub ResiliencyGuid: GUID,
}
#[test]
fn bindgen_test_layout__OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<_OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1__bindgen_ty_2>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1__bindgen_ty_2>()))
                .GetInfoOnly as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(GetInfoOnly)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1__bindgen_ty_2>()))
                .ReadOnly as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(ReadOnly)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1__bindgen_ty_2>()))
                .ResiliencyGuid as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(ResiliencyGuid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1__bindgen_ty_3 {
    pub GetInfoOnly: BOOL,
    pub ReadOnly: BOOL,
    pub ResiliencyGuid: GUID,
    pub SnapshotId: GUID,
}
#[test]
fn bindgen_test_layout__OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<_OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1__bindgen_ty_3>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(_OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1__bindgen_ty_3>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1__bindgen_ty_3>()))
                .GetInfoOnly as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(GetInfoOnly)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1__bindgen_ty_3>()))
                .ReadOnly as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(ReadOnly)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1__bindgen_ty_3>()))
                .ResiliencyGuid as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(ResiliencyGuid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1__bindgen_ty_3>()))
                .SnapshotId as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(SnapshotId)
        )
    );
}
#[test]
fn bindgen_test_layout__OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(_OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1>())).Version1
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1),
            "::",
            stringify!(Version1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1>())).Version2
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1),
            "::",
            stringify!(Version2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1>())).Version3
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OPEN_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1),
            "::",
            stringify!(Version3)
        )
    );
}
#[test]
fn bindgen_test_layout__OPEN_VIRTUAL_DISK_PARAMETERS() {
    assert_eq!(
        ::std::mem::size_of::<_OPEN_VIRTUAL_DISK_PARAMETERS>(),
        44usize,
        concat!("Size of: ", stringify!(_OPEN_VIRTUAL_DISK_PARAMETERS))
    );
    assert_eq!(
        ::std::mem::align_of::<_OPEN_VIRTUAL_DISK_PARAMETERS>(),
        4usize,
        concat!("Alignment of ", stringify!(_OPEN_VIRTUAL_DISK_PARAMETERS))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_OPEN_VIRTUAL_DISK_PARAMETERS>())).Version as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OPEN_VIRTUAL_DISK_PARAMETERS),
            "::",
            stringify!(Version)
        )
    );
}
pub type POPEN_VIRTUAL_DISK_PARAMETERS = *mut _OPEN_VIRTUAL_DISK_PARAMETERS;
pub const _VIRTUAL_DISK_ACCESS_MASK_VIRTUAL_DISK_ACCESS_NONE: _VIRTUAL_DISK_ACCESS_MASK = 0;
pub const _VIRTUAL_DISK_ACCESS_MASK_VIRTUAL_DISK_ACCESS_ATTACH_RO: _VIRTUAL_DISK_ACCESS_MASK =
    65536;
pub const _VIRTUAL_DISK_ACCESS_MASK_VIRTUAL_DISK_ACCESS_ATTACH_RW: _VIRTUAL_DISK_ACCESS_MASK =
    131072;
pub const _VIRTUAL_DISK_ACCESS_MASK_VIRTUAL_DISK_ACCESS_DETACH: _VIRTUAL_DISK_ACCESS_MASK = 262144;
pub const _VIRTUAL_DISK_ACCESS_MASK_VIRTUAL_DISK_ACCESS_GET_INFO: _VIRTUAL_DISK_ACCESS_MASK =
    524288;
pub const _VIRTUAL_DISK_ACCESS_MASK_VIRTUAL_DISK_ACCESS_CREATE: _VIRTUAL_DISK_ACCESS_MASK = 1048576;
pub const _VIRTUAL_DISK_ACCESS_MASK_VIRTUAL_DISK_ACCESS_METAOPS: _VIRTUAL_DISK_ACCESS_MASK =
    2097152;
pub const _VIRTUAL_DISK_ACCESS_MASK_VIRTUAL_DISK_ACCESS_READ: _VIRTUAL_DISK_ACCESS_MASK = 851968;
pub const _VIRTUAL_DISK_ACCESS_MASK_VIRTUAL_DISK_ACCESS_ALL: _VIRTUAL_DISK_ACCESS_MASK = 4128768;
pub const _VIRTUAL_DISK_ACCESS_MASK_VIRTUAL_DISK_ACCESS_WRITABLE: _VIRTUAL_DISK_ACCESS_MASK =
    3276800;
pub type _VIRTUAL_DISK_ACCESS_MASK = i32;
pub use self::_VIRTUAL_DISK_ACCESS_MASK as VIRTUAL_DISK_ACCESS_MASK;
pub const _OPEN_VIRTUAL_DISK_FLAG_OPEN_VIRTUAL_DISK_FLAG_NONE: _OPEN_VIRTUAL_DISK_FLAG = 0;
pub const _OPEN_VIRTUAL_DISK_FLAG_OPEN_VIRTUAL_DISK_FLAG_NO_PARENTS: _OPEN_VIRTUAL_DISK_FLAG = 1;
pub const _OPEN_VIRTUAL_DISK_FLAG_OPEN_VIRTUAL_DISK_FLAG_BLANK_FILE: _OPEN_VIRTUAL_DISK_FLAG = 2;
pub const _OPEN_VIRTUAL_DISK_FLAG_OPEN_VIRTUAL_DISK_FLAG_BOOT_DRIVE: _OPEN_VIRTUAL_DISK_FLAG = 4;
pub const _OPEN_VIRTUAL_DISK_FLAG_OPEN_VIRTUAL_DISK_FLAG_CACHED_IO: _OPEN_VIRTUAL_DISK_FLAG = 8;
pub const _OPEN_VIRTUAL_DISK_FLAG_OPEN_VIRTUAL_DISK_FLAG_CUSTOM_DIFF_CHAIN:
    _OPEN_VIRTUAL_DISK_FLAG = 16;
pub const _OPEN_VIRTUAL_DISK_FLAG_OPEN_VIRTUAL_DISK_FLAG_PARENT_CACHED_IO: _OPEN_VIRTUAL_DISK_FLAG =
    32;
pub const _OPEN_VIRTUAL_DISK_FLAG_OPEN_VIRTUAL_DISK_FLAG_VHDSET_FILE_ONLY: _OPEN_VIRTUAL_DISK_FLAG =
    64;
pub const _OPEN_VIRTUAL_DISK_FLAG_OPEN_VIRTUAL_DISK_FLAG_IGNORE_RELATIVE_PARENT_LOCATOR:
    _OPEN_VIRTUAL_DISK_FLAG = 128;
pub const _OPEN_VIRTUAL_DISK_FLAG_OPEN_VIRTUAL_DISK_FLAG_NO_WRITE_HARDENING:
    _OPEN_VIRTUAL_DISK_FLAG = 256;
pub type _OPEN_VIRTUAL_DISK_FLAG = i32;
pub use self::_OPEN_VIRTUAL_DISK_FLAG as OPEN_VIRTUAL_DISK_FLAG;
#[link(name = "VirtDisk")]
extern "stdcall" {
    pub fn OpenVirtualDisk(
        VirtualStorageType: PVIRTUAL_STORAGE_TYPE,
        Path: PCWSTR,
        VirtualDiskAccessMask: VIRTUAL_DISK_ACCESS_MASK,
        Flags: OPEN_VIRTUAL_DISK_FLAG,
        Parameters: POPEN_VIRTUAL_DISK_PARAMETERS,
        Handle: PHANDLE,
    ) -> DWORD;
}
pub const _ATTACH_VIRTUAL_DISK_VERSION_ATTACH_VIRTUAL_DISK_VERSION_UNSPECIFIED:
    _ATTACH_VIRTUAL_DISK_VERSION = 0;
pub const _ATTACH_VIRTUAL_DISK_VERSION_ATTACH_VIRTUAL_DISK_VERSION_1: _ATTACH_VIRTUAL_DISK_VERSION =
    1;
pub type _ATTACH_VIRTUAL_DISK_VERSION = i32;
pub use self::_ATTACH_VIRTUAL_DISK_VERSION as ATTACH_VIRTUAL_DISK_VERSION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ATTACH_VIRTUAL_DISK_PARAMETERS {
    pub Version: ATTACH_VIRTUAL_DISK_VERSION,
    pub __bindgen_anon_1: _ATTACH_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _ATTACH_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1 {
    pub Version1: _ATTACH_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ATTACH_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1__bindgen_ty_1 {
    pub Reserved: ULONG,
}
#[test]
fn bindgen_test_layout__ATTACH_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_ATTACH_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(_ATTACH_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ATTACH_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_ATTACH_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ATTACH_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1__bindgen_ty_1>()))
                .Reserved as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ATTACH_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(Reserved)
        )
    );
}
#[test]
fn bindgen_test_layout__ATTACH_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_ATTACH_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(_ATTACH_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ATTACH_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_ATTACH_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ATTACH_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1>())).Version1
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ATTACH_VIRTUAL_DISK_PARAMETERS__bindgen_ty_1),
            "::",
            stringify!(Version1)
        )
    );
}
#[test]
fn bindgen_test_layout__ATTACH_VIRTUAL_DISK_PARAMETERS() {
    assert_eq!(
        ::std::mem::size_of::<_ATTACH_VIRTUAL_DISK_PARAMETERS>(),
        8usize,
        concat!("Size of: ", stringify!(_ATTACH_VIRTUAL_DISK_PARAMETERS))
    );
    assert_eq!(
        ::std::mem::align_of::<_ATTACH_VIRTUAL_DISK_PARAMETERS>(),
        4usize,
        concat!("Alignment of ", stringify!(_ATTACH_VIRTUAL_DISK_PARAMETERS))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ATTACH_VIRTUAL_DISK_PARAMETERS>())).Version as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ATTACH_VIRTUAL_DISK_PARAMETERS),
            "::",
            stringify!(Version)
        )
    );
}
pub type PATTACH_VIRTUAL_DISK_PARAMETERS = *mut _ATTACH_VIRTUAL_DISK_PARAMETERS;
pub const _ATTACH_VIRTUAL_DISK_FLAG_ATTACH_VIRTUAL_DISK_FLAG_NONE: _ATTACH_VIRTUAL_DISK_FLAG = 0;
pub const _ATTACH_VIRTUAL_DISK_FLAG_ATTACH_VIRTUAL_DISK_FLAG_READ_ONLY: _ATTACH_VIRTUAL_DISK_FLAG =
    1;
pub const _ATTACH_VIRTUAL_DISK_FLAG_ATTACH_VIRTUAL_DISK_FLAG_NO_DRIVE_LETTER:
    _ATTACH_VIRTUAL_DISK_FLAG = 2;
pub const _ATTACH_VIRTUAL_DISK_FLAG_ATTACH_VIRTUAL_DISK_FLAG_PERMANENT_LIFETIME:
    _ATTACH_VIRTUAL_DISK_FLAG = 4;
pub const _ATTACH_VIRTUAL_DISK_FLAG_ATTACH_VIRTUAL_DISK_FLAG_NO_LOCAL_HOST:
    _ATTACH_VIRTUAL_DISK_FLAG = 8;
pub const _ATTACH_VIRTUAL_DISK_FLAG_ATTACH_VIRTUAL_DISK_FLAG_NO_SECURITY_DESCRIPTOR:
    _ATTACH_VIRTUAL_DISK_FLAG = 16;
pub const _ATTACH_VIRTUAL_DISK_FLAG_ATTACH_VIRTUAL_DISK_FLAG_BYPASS_DEFAULT_ENCRYPTION_POLICY:
    _ATTACH_VIRTUAL_DISK_FLAG = 32;
pub type _ATTACH_VIRTUAL_DISK_FLAG = i32;
pub use self::_ATTACH_VIRTUAL_DISK_FLAG as ATTACH_VIRTUAL_DISK_FLAG;
#[link(name = "VirtDisk")]
extern "stdcall" {
    pub fn AttachVirtualDisk(
        VirtualDiskHandle: HANDLE,
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
        Flags: ATTACH_VIRTUAL_DISK_FLAG,
        ProviderSpecificFlags: ULONG,
        Parameters: PATTACH_VIRTUAL_DISK_PARAMETERS,
        Overlapped: LPOVERLAPPED,
    ) -> DWORD;
}

#[link(name = "VirtDisk")]
extern "stdcall" {
    pub fn GetVirtualDiskPhysicalPath(
        VirtualDiskHandle: HANDLE,
        DiskPathSizeInBytes: PULONG,
        DiskPath: PWSTR,
    ) -> DWORD;
}

pub const _GET_VIRTUAL_DISK_INFO_VERSION_GET_VIRTUAL_DISK_INFO_UNSPECIFIED:
    _GET_VIRTUAL_DISK_INFO_VERSION = 0;
pub const _GET_VIRTUAL_DISK_INFO_VERSION_GET_VIRTUAL_DISK_INFO_SIZE:
    _GET_VIRTUAL_DISK_INFO_VERSION = 1;
pub const _GET_VIRTUAL_DISK_INFO_VERSION_GET_VIRTUAL_DISK_INFO_IDENTIFIER:
    _GET_VIRTUAL_DISK_INFO_VERSION = 2;
pub const _GET_VIRTUAL_DISK_INFO_VERSION_GET_VIRTUAL_DISK_INFO_PARENT_LOCATION:
    _GET_VIRTUAL_DISK_INFO_VERSION = 3;
pub const _GET_VIRTUAL_DISK_INFO_VERSION_GET_VIRTUAL_DISK_INFO_PARENT_IDENTIFIER:
    _GET_VIRTUAL_DISK_INFO_VERSION = 4;
pub const _GET_VIRTUAL_DISK_INFO_VERSION_GET_VIRTUAL_DISK_INFO_PARENT_TIMESTAMP:
    _GET_VIRTUAL_DISK_INFO_VERSION = 5;
pub const _GET_VIRTUAL_DISK_INFO_VERSION_GET_VIRTUAL_DISK_INFO_VIRTUAL_STORAGE_TYPE:
    _GET_VIRTUAL_DISK_INFO_VERSION = 6;
pub const _GET_VIRTUAL_DISK_INFO_VERSION_GET_VIRTUAL_DISK_INFO_PROVIDER_SUBTYPE:
    _GET_VIRTUAL_DISK_INFO_VERSION = 7;
pub const _GET_VIRTUAL_DISK_INFO_VERSION_GET_VIRTUAL_DISK_INFO_IS_4K_ALIGNED:
    _GET_VIRTUAL_DISK_INFO_VERSION = 8;
pub const _GET_VIRTUAL_DISK_INFO_VERSION_GET_VIRTUAL_DISK_INFO_PHYSICAL_DISK:
    _GET_VIRTUAL_DISK_INFO_VERSION = 9;
pub const _GET_VIRTUAL_DISK_INFO_VERSION_GET_VIRTUAL_DISK_INFO_VHD_PHYSICAL_SECTOR_SIZE:
    _GET_VIRTUAL_DISK_INFO_VERSION = 10;
pub const _GET_VIRTUAL_DISK_INFO_VERSION_GET_VIRTUAL_DISK_INFO_SMALLEST_SAFE_VIRTUAL_SIZE:
    _GET_VIRTUAL_DISK_INFO_VERSION = 11;
pub const _GET_VIRTUAL_DISK_INFO_VERSION_GET_VIRTUAL_DISK_INFO_FRAGMENTATION:
    _GET_VIRTUAL_DISK_INFO_VERSION = 12;
pub const _GET_VIRTUAL_DISK_INFO_VERSION_GET_VIRTUAL_DISK_INFO_IS_LOADED:
    _GET_VIRTUAL_DISK_INFO_VERSION = 13;
pub const _GET_VIRTUAL_DISK_INFO_VERSION_GET_VIRTUAL_DISK_INFO_VIRTUAL_DISK_ID:
    _GET_VIRTUAL_DISK_INFO_VERSION = 14;
pub const _GET_VIRTUAL_DISK_INFO_VERSION_GET_VIRTUAL_DISK_INFO_CHANGE_TRACKING_STATE:
    _GET_VIRTUAL_DISK_INFO_VERSION = 15;
pub type _GET_VIRTUAL_DISK_INFO_VERSION = i32;
pub use self::_GET_VIRTUAL_DISK_INFO_VERSION as GET_VIRTUAL_DISK_INFO_VERSION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _GET_VIRTUAL_DISK_INFO {
    pub Version: GET_VIRTUAL_DISK_INFO_VERSION,
    pub __bindgen_anon_1: _GET_VIRTUAL_DISK_INFO__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _GET_VIRTUAL_DISK_INFO__bindgen_ty_1 {
    pub Size: _GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_1,
    pub Identifier: GUID,
    pub ParentLocation: _GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_2,
    pub ParentIdentifier: GUID,
    pub ParentTimestamp: ULONG,
    pub VirtualStorageType: VIRTUAL_STORAGE_TYPE,
    pub ProviderSubtype: ULONG,
    pub Is4kAligned: BOOL,
    pub IsLoaded: BOOL,
    pub PhysicalDisk: _GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_3,
    pub VhdPhysicalSectorSize: ULONG,
    pub SmallestSafeVirtualSize: ULONGLONG,
    pub FragmentationPercentage: ULONG,
    pub VirtualDiskId: GUID,
    pub ChangeTrackingState: _GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_4,
    _bindgen_union_align: [u64; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_1 {
    pub VirtualSize: ULONGLONG,
    pub PhysicalSize: ULONGLONG,
    pub BlockSize: ULONG,
    pub SectorSize: ULONG,
}
#[test]
fn bindgen_test_layout__GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_1>()))
                .VirtualSize as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(VirtualSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_1>()))
                .PhysicalSize as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(PhysicalSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_1>())).BlockSize
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(BlockSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_1>()))
                .SectorSize as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(SectorSize)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_2 {
    pub ParentResolved: BOOL,
    pub ParentLocationBuffer: [WCHAR; 1usize],
}
#[test]
fn bindgen_test_layout__GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<_GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(_GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_2>()))
                .ParentResolved as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(ParentResolved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_2>()))
                .ParentLocationBuffer as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(ParentLocationBuffer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_3 {
    pub LogicalSectorSize: ULONG,
    pub PhysicalSectorSize: ULONG,
    pub IsRemote: BOOL,
}
#[test]
fn bindgen_test_layout__GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<_GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_3>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(_GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_3>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_3>()))
                .LogicalSectorSize as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(LogicalSectorSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_3>()))
                .PhysicalSectorSize as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(PhysicalSectorSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_3>())).IsRemote
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(IsRemote)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_4 {
    pub Enabled: BOOL,
    pub NewerChanges: BOOL,
    pub MostRecentId: [WCHAR; 1usize],
}
#[test]
fn bindgen_test_layout__GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<_GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_4>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(_GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_4>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_4>())).Enabled
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(Enabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_4>()))
                .NewerChanges as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(NewerChanges)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_4>()))
                .MostRecentId as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_GET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(MostRecentId)
        )
    );
}
#[test]
fn bindgen_test_layout__GET_VIRTUAL_DISK_INFO__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_GET_VIRTUAL_DISK_INFO__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_GET_VIRTUAL_DISK_INFO__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_GET_VIRTUAL_DISK_INFO__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_GET_VIRTUAL_DISK_INFO__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_GET_VIRTUAL_DISK_INFO__bindgen_ty_1>())).Size as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_GET_VIRTUAL_DISK_INFO__bindgen_ty_1),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_GET_VIRTUAL_DISK_INFO__bindgen_ty_1>())).Identifier as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_GET_VIRTUAL_DISK_INFO__bindgen_ty_1),
            "::",
            stringify!(Identifier)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_GET_VIRTUAL_DISK_INFO__bindgen_ty_1>())).ParentLocation
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_GET_VIRTUAL_DISK_INFO__bindgen_ty_1),
            "::",
            stringify!(ParentLocation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_GET_VIRTUAL_DISK_INFO__bindgen_ty_1>())).ParentIdentifier
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_GET_VIRTUAL_DISK_INFO__bindgen_ty_1),
            "::",
            stringify!(ParentIdentifier)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_GET_VIRTUAL_DISK_INFO__bindgen_ty_1>())).ParentTimestamp
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_GET_VIRTUAL_DISK_INFO__bindgen_ty_1),
            "::",
            stringify!(ParentTimestamp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_GET_VIRTUAL_DISK_INFO__bindgen_ty_1>())).VirtualStorageType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_GET_VIRTUAL_DISK_INFO__bindgen_ty_1),
            "::",
            stringify!(VirtualStorageType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_GET_VIRTUAL_DISK_INFO__bindgen_ty_1>())).ProviderSubtype
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_GET_VIRTUAL_DISK_INFO__bindgen_ty_1),
            "::",
            stringify!(ProviderSubtype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_GET_VIRTUAL_DISK_INFO__bindgen_ty_1>())).Is4kAligned as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_GET_VIRTUAL_DISK_INFO__bindgen_ty_1),
            "::",
            stringify!(Is4kAligned)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_GET_VIRTUAL_DISK_INFO__bindgen_ty_1>())).IsLoaded as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_GET_VIRTUAL_DISK_INFO__bindgen_ty_1),
            "::",
            stringify!(IsLoaded)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_GET_VIRTUAL_DISK_INFO__bindgen_ty_1>())).PhysicalDisk
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_GET_VIRTUAL_DISK_INFO__bindgen_ty_1),
            "::",
            stringify!(PhysicalDisk)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_GET_VIRTUAL_DISK_INFO__bindgen_ty_1>())).VhdPhysicalSectorSize
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_GET_VIRTUAL_DISK_INFO__bindgen_ty_1),
            "::",
            stringify!(VhdPhysicalSectorSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_GET_VIRTUAL_DISK_INFO__bindgen_ty_1>())).SmallestSafeVirtualSize
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_GET_VIRTUAL_DISK_INFO__bindgen_ty_1),
            "::",
            stringify!(SmallestSafeVirtualSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_GET_VIRTUAL_DISK_INFO__bindgen_ty_1>())).FragmentationPercentage
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_GET_VIRTUAL_DISK_INFO__bindgen_ty_1),
            "::",
            stringify!(FragmentationPercentage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_GET_VIRTUAL_DISK_INFO__bindgen_ty_1>())).VirtualDiskId
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_GET_VIRTUAL_DISK_INFO__bindgen_ty_1),
            "::",
            stringify!(VirtualDiskId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_GET_VIRTUAL_DISK_INFO__bindgen_ty_1>())).ChangeTrackingState
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_GET_VIRTUAL_DISK_INFO__bindgen_ty_1),
            "::",
            stringify!(ChangeTrackingState)
        )
    );
}
#[test]
fn bindgen_test_layout__GET_VIRTUAL_DISK_INFO() {
    assert_eq!(
        ::std::mem::size_of::<_GET_VIRTUAL_DISK_INFO>(),
        32usize,
        concat!("Size of: ", stringify!(_GET_VIRTUAL_DISK_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<_GET_VIRTUAL_DISK_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(_GET_VIRTUAL_DISK_INFO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GET_VIRTUAL_DISK_INFO>())).Version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_GET_VIRTUAL_DISK_INFO),
            "::",
            stringify!(Version)
        )
    );
}
pub type PGET_VIRTUAL_DISK_INFO = *mut _GET_VIRTUAL_DISK_INFO;
#[link(name = "VirtDisk")]
extern "stdcall" {
    pub fn GetVirtualDiskInformation(
        VirtualDiskHandle: HANDLE,
        VirtualDiskInfoSize: PULONG,
        VirtualDiskInfo: PGET_VIRTUAL_DISK_INFO,
        SizeUsed: PULONG,
    ) -> DWORD;
}
pub const _SET_VIRTUAL_DISK_INFO_VERSION_SET_VIRTUAL_DISK_INFO_UNSPECIFIED:
    _SET_VIRTUAL_DISK_INFO_VERSION = 0;
pub const _SET_VIRTUAL_DISK_INFO_VERSION_SET_VIRTUAL_DISK_INFO_PARENT_PATH:
    _SET_VIRTUAL_DISK_INFO_VERSION = 1;
pub const _SET_VIRTUAL_DISK_INFO_VERSION_SET_VIRTUAL_DISK_INFO_IDENTIFIER:
    _SET_VIRTUAL_DISK_INFO_VERSION = 2;
pub const _SET_VIRTUAL_DISK_INFO_VERSION_SET_VIRTUAL_DISK_INFO_PARENT_PATH_WITH_DEPTH:
    _SET_VIRTUAL_DISK_INFO_VERSION = 3;
pub const _SET_VIRTUAL_DISK_INFO_VERSION_SET_VIRTUAL_DISK_INFO_PHYSICAL_SECTOR_SIZE:
    _SET_VIRTUAL_DISK_INFO_VERSION = 4;
pub const _SET_VIRTUAL_DISK_INFO_VERSION_SET_VIRTUAL_DISK_INFO_VIRTUAL_DISK_ID:
    _SET_VIRTUAL_DISK_INFO_VERSION = 5;
pub const _SET_VIRTUAL_DISK_INFO_VERSION_SET_VIRTUAL_DISK_INFO_CHANGE_TRACKING_STATE:
    _SET_VIRTUAL_DISK_INFO_VERSION = 6;
pub const _SET_VIRTUAL_DISK_INFO_VERSION_SET_VIRTUAL_DISK_INFO_PARENT_LOCATOR:
    _SET_VIRTUAL_DISK_INFO_VERSION = 7;
pub type _SET_VIRTUAL_DISK_INFO_VERSION = i32;
pub use self::_SET_VIRTUAL_DISK_INFO_VERSION as SET_VIRTUAL_DISK_INFO_VERSION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _SET_VIRTUAL_DISK_INFO {
    pub Version: SET_VIRTUAL_DISK_INFO_VERSION,
    pub __bindgen_anon_1: _SET_VIRTUAL_DISK_INFO__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _SET_VIRTUAL_DISK_INFO__bindgen_ty_1 {
    pub ParentFilePath: PCWSTR,
    pub UniqueIdentifier: GUID,
    pub ParentPathWithDepthInfo: _SET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_1,
    pub VhdPhysicalSectorSize: ULONG,
    pub VirtualDiskId: GUID,
    pub ChangeTrackingEnabled: BOOL,
    pub ParentLocator: _SET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_2,
    _bindgen_union_align: [u64; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_1 {
    pub ChildDepth: ULONG,
    pub ParentFilePath: PCWSTR,
}
#[test]
fn bindgen_test_layout__SET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_SET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_SET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_SET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_SET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_1>()))
                .ChildDepth as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(ChildDepth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_1>()))
                .ParentFilePath as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_SET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(ParentFilePath)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_2 {
    pub LinkageId: GUID,
    pub ParentFilePath: PCWSTR,
}
#[test]
fn bindgen_test_layout__SET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<_SET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_2>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_SET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_SET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_SET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_2>())).LinkageId
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(LinkageId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_2>()))
                .ParentFilePath as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_SET_VIRTUAL_DISK_INFO__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(ParentFilePath)
        )
    );
}
#[test]
fn bindgen_test_layout__SET_VIRTUAL_DISK_INFO__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_SET_VIRTUAL_DISK_INFO__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_SET_VIRTUAL_DISK_INFO__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_SET_VIRTUAL_DISK_INFO__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_SET_VIRTUAL_DISK_INFO__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SET_VIRTUAL_DISK_INFO__bindgen_ty_1>())).ParentFilePath
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SET_VIRTUAL_DISK_INFO__bindgen_ty_1),
            "::",
            stringify!(ParentFilePath)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SET_VIRTUAL_DISK_INFO__bindgen_ty_1>())).UniqueIdentifier
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SET_VIRTUAL_DISK_INFO__bindgen_ty_1),
            "::",
            stringify!(UniqueIdentifier)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SET_VIRTUAL_DISK_INFO__bindgen_ty_1>())).ParentPathWithDepthInfo
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SET_VIRTUAL_DISK_INFO__bindgen_ty_1),
            "::",
            stringify!(ParentPathWithDepthInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SET_VIRTUAL_DISK_INFO__bindgen_ty_1>())).VhdPhysicalSectorSize
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SET_VIRTUAL_DISK_INFO__bindgen_ty_1),
            "::",
            stringify!(VhdPhysicalSectorSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SET_VIRTUAL_DISK_INFO__bindgen_ty_1>())).VirtualDiskId
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SET_VIRTUAL_DISK_INFO__bindgen_ty_1),
            "::",
            stringify!(VirtualDiskId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SET_VIRTUAL_DISK_INFO__bindgen_ty_1>())).ChangeTrackingEnabled
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SET_VIRTUAL_DISK_INFO__bindgen_ty_1),
            "::",
            stringify!(ChangeTrackingEnabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SET_VIRTUAL_DISK_INFO__bindgen_ty_1>())).ParentLocator
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SET_VIRTUAL_DISK_INFO__bindgen_ty_1),
            "::",
            stringify!(ParentLocator)
        )
    );
}
#[test]
fn bindgen_test_layout__SET_VIRTUAL_DISK_INFO() {
    assert_eq!(
        ::std::mem::size_of::<_SET_VIRTUAL_DISK_INFO>(),
        32usize,
        concat!("Size of: ", stringify!(_SET_VIRTUAL_DISK_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<_SET_VIRTUAL_DISK_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(_SET_VIRTUAL_DISK_INFO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SET_VIRTUAL_DISK_INFO>())).Version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SET_VIRTUAL_DISK_INFO),
            "::",
            stringify!(Version)
        )
    );
}
pub type PSET_VIRTUAL_DISK_INFO = *mut _SET_VIRTUAL_DISK_INFO;
#[link(name = "VirtDisk")]
extern "stdcall" {
    pub fn SetVirtualDiskInformation(
        VirtualDiskHandle: HANDLE,
        VirtualDiskInfo: PSET_VIRTUAL_DISK_INFO,
    ) -> DWORD;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _QUERY_CHANGES_VIRTUAL_DISK_RANGE {
    pub ByteOffset: ULONG64,
    pub ByteLength: ULONG64,
    pub Reserved: ULONG64,
}
#[test]
fn bindgen_test_layout__QUERY_CHANGES_VIRTUAL_DISK_RANGE() {
    assert_eq!(
        ::std::mem::size_of::<_QUERY_CHANGES_VIRTUAL_DISK_RANGE>(),
        24usize,
        concat!("Size of: ", stringify!(_QUERY_CHANGES_VIRTUAL_DISK_RANGE))
    );
    assert_eq!(
        ::std::mem::align_of::<_QUERY_CHANGES_VIRTUAL_DISK_RANGE>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_QUERY_CHANGES_VIRTUAL_DISK_RANGE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_QUERY_CHANGES_VIRTUAL_DISK_RANGE>())).ByteOffset as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_QUERY_CHANGES_VIRTUAL_DISK_RANGE),
            "::",
            stringify!(ByteOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_QUERY_CHANGES_VIRTUAL_DISK_RANGE>())).ByteLength as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_QUERY_CHANGES_VIRTUAL_DISK_RANGE),
            "::",
            stringify!(ByteLength)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_QUERY_CHANGES_VIRTUAL_DISK_RANGE>())).Reserved as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_QUERY_CHANGES_VIRTUAL_DISK_RANGE),
            "::",
            stringify!(Reserved)
        )
    );
}
pub type PQUERY_CHANGES_VIRTUAL_DISK_RANGE = *mut _QUERY_CHANGES_VIRTUAL_DISK_RANGE;
pub const _QUERY_CHANGES_VIRTUAL_DISK_FLAG_QUERY_CHANGES_VIRTUAL_DISK_FLAG_NONE:
    _QUERY_CHANGES_VIRTUAL_DISK_FLAG = 0;
pub type _QUERY_CHANGES_VIRTUAL_DISK_FLAG = i32;
pub use self::_QUERY_CHANGES_VIRTUAL_DISK_FLAG as QUERY_CHANGES_VIRTUAL_DISK_FLAG;

#[link(name = "VirtDisk")]
extern "stdcall" {
    pub fn QueryChangesVirtualDisk(
        VirtualDiskHandle: HANDLE,
        ChangeTrackingId: PCWSTR,
        ByteOffset: ULONG64,
        ByteLength: ULONG64,
        Flags: QUERY_CHANGES_VIRTUAL_DISK_FLAG,
        Ranges: PQUERY_CHANGES_VIRTUAL_DISK_RANGE,
        RangeCount: PULONG,
        ProcessedLength: PULONG64,
    ) -> DWORD;
}
